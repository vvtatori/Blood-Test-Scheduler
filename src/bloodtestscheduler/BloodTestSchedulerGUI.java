/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bloodtestscheduler;

import bloodtestscheduler.doubleLinkedList.MyPatientDLList;
import bloodtestscheduler.priorityQueue.MyPatientPriorityQ;
import bloodtestscheduler.queue.NoShowPatientsQueue;
import javax.swing.JOptionPane;

/**
 *
 * @author vvtat
 */
public class BloodTestSchedulerGUI extends javax.swing.JFrame {
    private MyPatientDLList patientList;       // Stores all patients
    private MyPatientPriorityQ priorityQueue; // Schedules next patient
    private NoShowPatientsQueue noShowQueue;  //Holds a track of the no show patients
    /**
     * Creates new form BloodTestSchedulerGUI
     */
    public BloodTestSchedulerGUI() {
        initComponents();
        patientList = new MyPatientDLList();
        priorityQueue = new MyPatientPriorityQ();
        noShowQueue = new NoShowPatientsQueue(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        priorityLbl = new javax.swing.JLabel();
        gpDetailsLbl = new javax.swing.JLabel();
        ageLbl = new javax.swing.JLabel();
        fromHospLbl = new javax.swing.JLabel();
        addPatientBtn = new javax.swing.JButton();
        displayAllPatBtn = new javax.swing.JButton();
        lblTitle2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayPatTA = new javax.swing.JTextArea();
        schedulePatBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        schedulePatTA = new javax.swing.JTextArea();
        lblTitle3 = new javax.swing.JLabel();
        searchPatBtn = new javax.swing.JButton();
        deletePatBtn = new javax.swing.JButton();
        addNoShowBtn = new javax.swing.JButton();
        lblTitle4 = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        priorityCmb = new javax.swing.JComboBox<>();
        gpDetailsTF = new javax.swing.JTextField();
        ageTF = new javax.swing.JTextField();
        fromHospCheckBox = new javax.swing.JCheckBox();
        viewNoShowBTN = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayNoShowTA = new javax.swing.JTextArea();
        exitBTN = new javax.swing.JButton();
        displayPQBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setText("BLOOD TEST SCHEDULER");

        nameLbl.setText("Name");

        priorityLbl.setText("Priority");

        gpDetailsLbl.setText("GP Details");

        ageLbl.setText("Age");

        fromHospLbl.setText("Coming from Hospital?");

        addPatientBtn.setText("ADD Patient");
        addPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientBtnActionPerformed(evt);
            }
        });

        displayAllPatBtn.setText("DISPLAY All Patients");
        displayAllPatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllPatBtnActionPerformed(evt);
            }
        });

        lblTitle2.setText("2. SCHEDULE NEXT PATIENT");

        displayPatTA.setColumns(20);
        displayPatTA.setRows(5);
        jScrollPane1.setViewportView(displayPatTA);

        schedulePatBtn.setText("Scheduled Next Patient");
        schedulePatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schedulePatBtnActionPerformed(evt);
            }
        });

        schedulePatTA.setColumns(20);
        schedulePatTA.setRows(5);
        jScrollPane2.setViewportView(schedulePatTA);

        lblTitle3.setText("3. NO SHOW PATIENTS");

        searchPatBtn.setText("SEARCHPatient");
        searchPatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatBtnActionPerformed(evt);
            }
        });

        deletePatBtn.setText("DELETE Patient");
        deletePatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatBtnActionPerformed(evt);
            }
        });

        addNoShowBtn.setText("ADD No Show Patient");
        addNoShowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoShowBtnActionPerformed(evt);
            }
        });

        lblTitle4.setText("1. MANAGE PATIENT REQUESTS");

        priorityCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Urgent", "Medium", "Low" }));

        fromHospCheckBox.setText("YES");

        viewNoShowBTN.setText("VIEW All No Show Patients");
        viewNoShowBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewNoShowBTNActionPerformed(evt);
            }
        });

        displayNoShowTA.setColumns(20);
        displayNoShowTA.setRows(5);
        jScrollPane3.setViewportView(displayNoShowTA);

        exitBTN.setText("EXIT");

        displayPQBtn.setText("View Full Priority Queue");
        displayPQBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayPQBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle2)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(priorityLbl)
                                    .addComponent(nameLbl)
                                    .addComponent(gpDetailsLbl)
                                    .addComponent(ageLbl))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTitle4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(126, 126, 126)
                                                    .addComponent(lblTitle3))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(151, 151, 151)
                                                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(ageTF)
                                                    .addComponent(gpDetailsTF)
                                                    .addComponent(priorityCmb, 0, 128, Short.MAX_VALUE))))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addPatientBtn)
                                        .addGap(86, 86, 86)
                                        .addComponent(displayAllPatBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fromHospLbl)
                                        .addGap(166, 166, 166)
                                        .addComponent(fromHospCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchPatBtn)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 45, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(45, 45, 45))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(exitBTN)
                                    .addContainerGap()))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(schedulePatBtn)
                        .addComponent(addNoShowBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(displayPQBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewNoShowBTN)
                        .addGap(408, 408, 408))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(deletePatBtn)
                        .addGap(244, 244, 244))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nameLbl)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTitle4)
                            .addComponent(exitBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priorityCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priorityLbl))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gpDetailsLbl)
                            .addComponent(gpDetailsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageLbl)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromHospLbl)
                    .addComponent(fromHospCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPatientBtn)
                    .addComponent(displayAllPatBtn)
                    .addComponent(searchPatBtn)
                    .addComponent(deletePatBtn))
                .addGap(39, 39, 39)
                .addComponent(lblTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(schedulePatBtn)
                        .addGap(30, 30, 30)
                        .addComponent(displayPQBtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(lblTitle3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewNoShowBTN)
                    .addComponent(addNoShowBtn))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayAllPatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllPatBtnActionPerformed
        // TODO add your handling code here:
        displayPatTA.append(patientList.printList());
    }//GEN-LAST:event_displayAllPatBtnActionPerformed

    private void addPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientBtnActionPerformed
        // TODO add your handling code here:
        //Fetching the values in the text fields
        String name = nameTF.getText();
        String priority = (String) priorityCmb.getSelectedItem();
        String detailsGP = gpDetailsTF.getText();
        int age = Integer.parseInt(ageTF.getText());
        boolean fromHospital = fromHospCheckBox.isSelected();
        
        Patient newPatient = new Patient(name, priority, detailsGP, age, fromHospital);
        patientList.addPatient(newPatient); // Add to list
        priorityQueue.enqueue(newPatient); // Add to Priority Queue
        //display
        displayPatTA.append("Patient Added: " + name + "\n");
        
    }//GEN-LAST:event_addPatientBtnActionPerformed

    private void searchPatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatBtnActionPerformed
        // TODO add your handling code here:
        //prompt for the name to be searched
        String name = JOptionPane.showInputDialog(null, "Enter name of patient to search");
        //check if no name is entered
        if (name.isEmpty()){
            JOptionPane.showMessageDialog(null, "No name entered");
            return;
        } else{
            //Searches through the list for a matching name using the get method in the dll
            Patient mySearch = patientList.getPatient(name);
            if(mySearch != null){ //if name is found
                displayPatTA.append("Patient Found: " + "\n" + mySearch.toString() + "\n");
            } else{
                displayPatTA.append("Patient not found" + "\n");
            }
        }
    }//GEN-LAST:event_searchPatBtnActionPerformed

    private void deletePatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatBtnActionPerformed
        // TODO add your handling code here:
        //Check if the list is empty before deleting
        if(patientList.size() == 0){
            JOptionPane.showMessageDialog(null, "There are no patients in the list");
            return;
        }
        //prompt to enter name of the patient to delete
        String name = JOptionPane.showInputDialog(null, "Enter name of patient to delete");
        //check if no name has been entered
        if (name.isEmpty()){
            JOptionPane.showMessageDialog(null, "No name entered");
            return;
        } else {
            //Searching for the name of the patient first
            Patient mySearch = patientList.getPatient(name);
            if (mySearch != null) {
                patientList.removePatient(name);  //remove the patient if the name is found
                
                displayPatTA.append("Patient " + name + "deleted successfully!" + "\n");
            } else {
                displayPatTA.append("Patient not found" + "\n");
            }
        }
    }//GEN-LAST:event_deletePatBtnActionPerformed

    private void addNoShowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoShowBtnActionPerformed
        // TODO add your handling code here:
        
        //Prompt for the name of patient to be marked as a no show
         String patientName = JOptionPane.showInputDialog("Enter patient name to mark as No-Show:");
         
         //check if field is empty
         if(patientName.isEmpty()){
             displayNoShowTA.append("No name entered" + "\n");
             return;
         } else{
            //Search for the name in the dllist
            Patient noShowPatient;  //to hold the name of the patient to be marked as a no show
            Patient mySearch = patientList.getPatient(patientName);
            if (mySearch != null) {
                noShowPatient = mySearch;
                //Add the patient to the queue
                noShowQueue.enqueue(noShowPatient);
                
                //remove them from priorityQ:
                //Find them in the priority queue
                noShowPatient = findPatientInPriorityQueue(patientName);
                removePatientFromPriorityQueue(patientName);
                
                //Display message
                displayNoShowTA.append("Added successfully" + "\n");
            } else {
                displayNoShowTA.append("Patient not found" + "\n");
            }
            
         }
       
    }//GEN-LAST:event_addNoShowBtnActionPerformed

    private void viewNoShowBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewNoShowBTNActionPerformed
        // TODO add your handling code here:
        displayNoShowTA.append("No show Patients: " + "\n" +noShowQueue.displayQueue() + "\n");
    }//GEN-LAST:event_viewNoShowBTNActionPerformed

    private void schedulePatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedulePatBtnActionPerformed
        // TODO add your handling code here:
        //Check if queue is empty
        if(priorityQueue.isEmpty()){
            schedulePatTA.append("No Patients in the queue");
        } else{
            //get patient at the front of PQ
            Patient myNextPatient = priorityQueue.peek(); //Returns the patient at the front without removing 
            
            //display
            schedulePatTA.append("Next Patient: " + "\n" + myNextPatient.toString() + "\n");
        }
    }//GEN-LAST:event_schedulePatBtnActionPerformed

    private void displayPQBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayPQBtnActionPerformed
        // TODO add your handling code here:
        // Check if the priority queue is empty
        if (priorityQueue.isEmpty()) {
            // If the queue is empty, notify the user
            JOptionPane.showMessageDialog(null, "No patients in the queue.");
        } else{
            schedulePatTA.append(priorityQueue.printPQueue());
        }
    }//GEN-LAST:event_displayPQBtnActionPerformed
    
    //Method for finding a patient in the priority queue
    private Patient findPatientInPriorityQueue(String patientName) {
        for (Patient patient : priorityQueue.list) {
            if (patient.getName().equalsIgnoreCase(patientName)) {
                return patient;  // Return the patient if found
            }
        }
        return null;  // Return null if not found
    }
    
    //Method for removing a patient in the priority queue
    private void removePatientFromPriorityQueue(String patientName) {
        Patient patientToRemove = null;
        for (Patient patient : priorityQueue.list) {
            if (patient.getName().equalsIgnoreCase(patientName)) {
                patientToRemove = patient;
                break;  //  break the loop when patient is found
            }
        }

        if (patientToRemove != null) {  //If patient was found
            // Remove the patient from the priority queue
            priorityQueue.list.remove(patientToRemove);
            JOptionPane.showMessageDialog(null, "Patient " + patientName + " has been removed from the priority queue.");
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BloodTestSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BloodTestSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BloodTestSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BloodTestSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BloodTestSchedulerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNoShowBtn;
    private javax.swing.JButton addPatientBtn;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTF;
    private javax.swing.JButton deletePatBtn;
    private javax.swing.JButton displayAllPatBtn;
    private javax.swing.JTextArea displayNoShowTA;
    private javax.swing.JButton displayPQBtn;
    private javax.swing.JTextArea displayPatTA;
    private javax.swing.JButton exitBTN;
    private javax.swing.JCheckBox fromHospCheckBox;
    private javax.swing.JLabel fromHospLbl;
    private javax.swing.JLabel gpDetailsLbl;
    private javax.swing.JTextField gpDetailsTF;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JLabel lblTitle3;
    private javax.swing.JLabel lblTitle4;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTF;
    private javax.swing.JComboBox<String> priorityCmb;
    private javax.swing.JLabel priorityLbl;
    private javax.swing.JButton schedulePatBtn;
    private javax.swing.JTextArea schedulePatTA;
    private javax.swing.JButton searchPatBtn;
    private javax.swing.JButton viewNoShowBTN;
    // End of variables declaration//GEN-END:variables
}
